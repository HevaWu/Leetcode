/*
You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.

Some nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove exactly one node from initial.

Return the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.

Note that if a node was removed from the initial list of infected nodes, it might still be infected later due to the malware spread.



Example 1:

Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0
Example 2:

Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
Output: 0
Example 3:

Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
Output: 1


Constraints:

n == graph.length
n == graph[i].length
2 <= n <= 300
graph[i][j] is 0 or 1.
graph[i][j] == graph[j][i]
graph[i][i] == 1
1 <= initial.length <= n
0 <= initial[i] <= n - 1
All the integers in initial are unique.
*/

/*
Solution 1:
UF

1. go through graph, build uf
2. uf_cache to help record uf.find(i) result
3. parent[i] get number of node connected to each parent
4. find which node we should removed
    - map to record how many node in initial is connected with each other.
        map[i] == 1 means if we remove i node, in remain initial node, its related connected node will not be infected later.
        map[i] > 1 means even we remove it, in the later, it can be infected again
    - go through initial, try to find which node we should remove for get better results.
        - if node == -1, no node assign before, just assign it
        - if i node map[i] == 1, map[node] > 1, we prefer hold ith node, because map[node] can me infected later, remove it actually not change our finial result
        - if i node map[i] == 1. map[node] == 1, parent[node] < parent[i], this means the node conencted to node is less than node connected to i, remove i node can get shorten node be infected
        - if i node and node has same parent, i < node, we pick i, because question mentioned we want a shorter index

Time Complexity: O(n^2)
Space Complexity: O(n)
*/
class Solution {
    func minMalwareSpread(_ graph: [[Int]], _ initial: [Int]) -> Int {
        let n = graph.count

        var uf = UF(n)
        for i in 0..<(n-1) {
            for j in (i+1)..<n {
                if graph[i][j] == 1 {
                    uf.union(i, j)
                }
            }
        }

        // uf_cache[i] is == uf.find(i)
        var uf_cache = Array(repeating: 0, count: n)
        for i in 0..<n {
            uf_cache[i] = uf.find(i)
        }

        // parent[i] means number of nodes connected to i, where i is their parent
        var parent = Array(repeating: 0, count: n)
        for i in 0..<n {
            parent[uf_cache[i]] += 1
        }

        // print(uf_cache, parent)

        // find which initial node connected with most nodes
        var node = -1

        var map = [Int: Int]()
        for i in initial {
            map[uf_cache[i], default: 0] += 1
        }

        // if no node is set
        // if parent[uf.find(i)] == 1, remove it, it will not be infected in the later
        // smallest index, so check  parent[uf_cache[i]] == parent[uf_cache[node]] && i < node
        for i in initial {
            if node == -1
            || (map[uf_cache[i]]! == 1
                && (map[uf_cache[node]]! > 1
                    || parent[uf_cache[i]] > parent[uf_cache[node]]))
            || (parent[uf_cache[i]] == parent[uf_cache[node]] && i < node) {
                node = i
            }
        }

        return node
    }
}

class UF {
    var parent: [Int]
    init(_ n: Int) {
        parent = Array(0..<n)
    }

    func find(_ x: Int) -> Int {
        if parent[x] != x {
            parent[x] = find(parent[x])
        }
        return parent[x]
    }

    func union(_ x: Int, _ y: Int) {
        let px = find(x)
        let py = find(y)
        if px != py {
            parent[px] = py
        }
    }
}